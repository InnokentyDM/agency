@model Agency.Models.AddAdModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .stationInfo {
        height: 150px;
        width: 250px;
    }
</style>



<h2>Create</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Ad</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="jumbotron">
            <form action="~/Home/SaveUploadedFile" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm" style="width: 50px; background: none; border: none;">
                <div class="fallback">
                    <input name="file" type="file" multiple />
                    <input type="submit" value="Upload" />
                </div>
            </form>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.advert.AD_TYPE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.advert.AD_TYPE_ID, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.advert.AD_TYPE.NAME, (SelectList)ViewBag.AD_TYPE)
                @Html.ValidationMessageFor(model => model.advert.AD_TYPE.NAME, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advert.TITLE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advert.TITLE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advert.TITLE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advert.DESCRIPTION, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.advert.DESCRIPTION, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advert.DESCRIPTION, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advert.PRICE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.advert.PRICE, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.advert.PRICE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.advert.PUBLISHED, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.advert.PUBLISHED)
                    @Html.ValidationMessageFor(model => model.advert.PUBLISHED, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.obj.OBJECT_KIND, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.advert.AD_TYPE_ID, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.obj.OBJECT_KIND.NAME, (SelectList)ViewBag.OBJECT_KIND)
                @Html.ValidationMessageFor(model => model.obj.OBJECT_KIND.NAME, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.obj.OBJECT_TYPE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.advert.AD_TYPE_ID, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.obj.OBJECT_TYPE.NAME, (SelectList)ViewBag.OBJECT_TYPE)
                @Html.ValidationMessageFor(model => model.obj.OBJECT_TYPE.NAME, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">          
            <div class="col-md-10">
                @Html.HiddenFor(model => model.obj.GeoLat)
                @Html.HiddenFor(model => model.obj.GeoLong)
                @Html.ValidationMessageFor(model => model.obj.OBJECT_TYPE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.obj.FLOOR, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.obj.FLOOR, new SelectList(new List<SelectListItem>
           {
               new SelectListItem {Text = "1", Value = "1"},
               new SelectListItem {Text = "2",  Value = "2" },
               new SelectListItem {Text = "3",  Value = "3" },
               new SelectListItem {Text = "4",  Value = "4" },
               new SelectListItem {Text = "5",  Value = "5" },
               new SelectListItem {Text = "6",  Value = "6" },
               new SelectListItem {Text = "7",  Value = "7" },
               new SelectListItem {Text = "8",  Value = "8" },
               new SelectListItem {Text = "9",  Value = "9" },
               new SelectListItem {Text = "10",  Value = "10" },
               new SelectListItem {Text = "11",  Value = "11" },
               new SelectListItem {Text = "12",  Value = "12" }
           }, "Value", "Text", 1), String.Empty, new { id = "textddl", @class = "col-xs-12" })
                @Html.ValidationMessageFor(model => model.obj.FLOOR, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.obj.ROOMS, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.obj.ROOMS, new SelectList(new List<SelectListItem>
           {
               new SelectListItem {Text = "1", Value = "1"},
               new SelectListItem {Text = "2",  Value = "2" },
               new SelectListItem {Text = "3",  Value = "3" },
               new SelectListItem {Text = "4",  Value = "4" },
               new SelectListItem {Text = "5",  Value = "5" },
               new SelectListItem {Text = "6",  Value = "6" },
               new SelectListItem {Text = "7",  Value = "7" },
               new SelectListItem {Text = "8",  Value = "8" },
               new SelectListItem {Text = "9",  Value = "9" },
               new SelectListItem {Text = "10",  Value = "10" }       
           }, "Value", "Text", 1), String.Empty, new { id = "textddl", @class = "col-xs-12" })
                @Html.ValidationMessageFor(model => model.obj.ROOMS, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map"></div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.obj., htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OBJECT_ID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OBJECT_ID, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 56.136288, lng: 40.397611 },
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
            searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // [START region_getplaces]
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach(function(marker) {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function(place) {
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
        // [END region_getplaces]
    }</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD5mMei8ALRLhqMCuW6yzu7r8_TKQT4TJM&callback=initMap">
</script>
 <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
    
.controls {
  margin-top: 10px;
  border: 1px solid transparent;
  border-radius: 2px 0 0 2px;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  height: 32px;
  outline: none;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

#pac-input {
  background-color: #fff;
  font-family: Roboto;
  font-size: 15px;
  font-weight: 300;
  margin-left: 12px;
  padding: 0 11px 0 13px;
  text-overflow: ellipsis;
  width: 300px;
}

#pac-input:focus {
  border-color: #4d90fe;
}

.pac-container {
  font-family: Roboto;
}

#type-selector {
  color: #fff;
  background-color: #4d90fe;
  padding: 5px 11px 0px 11px;
}

#type-selector label {
  font-family: Roboto;
  font-size: 13px;
  font-weight: 300;
}
    #map {
        width: 100%;
        height: 400px;
        background-color: grey;
    }
    #dropZone {
        background: gray;
        border: black dashed 3px;
        width: 200px;
        padding: 50px;
        text-align: center;
        color: white;
    }
</style>
    <script type="text/javascript">
    //    $(document).ready(function () {
    //        Dropzone.autoDiscover = false;
    //        //Simple Dropzonejs 
    //        $("#dZUpload").dropzone({
    //            url: "hn_SimpeFileUploader.ashx",
    //            addRemoveLinks: true,
    //            success: function (file, response) {
    //                var imgName = response;
    //                file.previewElement.classList.add("dz-success");
    //                console.log("Successfully uploaded :" + imgName);
    //            },
    //            error: function (file, response) {
    //                file.previewElement.classList.add("dz-error");
    //            }
    //        });
         
        //});
        Dropzone.options.dropzoneForm = {
            init: function () {
                this.on("complete", function (data) {
                    //var res = eval('(' + data.xhr.responseText + ')');
                    var res = JSON.parse(data.xhr.responseText);
                });
            }
        };
</script>
}
